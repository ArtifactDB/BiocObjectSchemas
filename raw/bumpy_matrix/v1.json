{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "bumpy_matrix/v1.json",
    "type": "object",
    "title": "Bumpy Matrix",
    "description": "A virtual \"bumpy\" matrix of vector-like objects of the same type, corresponding to the BumpyMatrix class from the [BumpyMatrix](https://www.bioconductor.org/packages/BumpyMatrix) package. Each entry of the matrix contains a vector-like object with a variable number of subelements. For efficient storage, all matrix elements are concatenated into a single object of the same type, with length equal to the total number of subelements across all vector-like objects.\n\nTo recover the bumpy matrix, we can inspect the partitioning information in the data frame, which is saved to `path` as a CSV file under the [**comservatory**](https://ltla.github.io/comservatory) specification. Each row of the data frame corresponds to an vector-like object in the bumpy matrix. The columns `row`, `column` and `number` are present in this data frame, specifying the 1-based row index, 1-based column index and length of the vector-like object. Subelements of the concatenated object are partitioned by assigning the specified `number` of consecutive subelements into a series of contiguous vector-like objects, each of which correspond to successive rows in the data frame. Matrix entries not listed in the data frame are assumed to be length-0 vector-like objects of the same type.\n\nOptionally, matrix dimnames are stored as separate data frames and referenced by `row_names` and `column_names`.\n\nConcrete subclasses are expected to provide a `concatenated` property that points to the concatenated object.", 
    "allOf": [
        { "$ref": "../array/v1.json" },
        { "$ref": "../_md5sum/v1.json" },
        {
            "properties": { 
                "array": {
                    "properties": {
                        "dimensions": {
                            "minItems": 2,
                            "maxItems": 2
                        }
                    }
                }
            }
        }
    ],
    "required": [ 
        "bumpy_matrix"
    ],
    "properties": {
        "bumpy_matrix": {
            "type":"object",
            "additionalProperties": false,
            "required": ["object_count"],
            "properties": {
                "object_count": {
                    "type": "integer",
                    "description": "Number of vector-like objects in the bumpy matrix, where each object is represented by a row in the data frame at `path`. If this is less than the product of the matrix dimensions, it is assumed that the entries missing from the CSV correspond to empty vector-like objects in the bumpy matrix.",
                    "minimum": 0
                },
                "object_names": {
                    "type": "boolean",
                    "description": "Whether the individual vector-like objects are named. If `true`, the first column of the CSV is called `names` and contains the name for the object corresponding to each row. Note that this does not represent the row or column names of the bumpy matrix itself, but instead of the individual (non-empty) vector-like objects.",
                    "default": false
                },
                "row_names": {
                    "type": "object",
                    "description": "Pointer to a data frame containing the row names for the bumpy matrix. This should be of length equal to the number of rows. If omitted, no row names were present.",
                    "properties": {
                        "resource": {
                            "_children":{
                                "contains": ["data_frame"]
                            }
                        }
                    },
                    "allOf": [ { "$ref": "../_resource/v1.json" } ]
                },
                "column_names": {
                    "type": "object",
                    "description": "Pointer to a data frame containing the column names for the bumpy matrix. This should be of length equal to the number of columns. If omitted, no column names were present.",
                    "properties": {
                        "resource": {
                            "_children":{
                                "contains": ["data_frame"]
                            }
                        }
                    },
                    "allOf": [ { "$ref": "../_resource/v1.json" } ]
                }
            },
            "allOf": [
                { "$ref": "../_compression/v1.json" }
            ]
        }
    },
    "_attributes": {
        "format": "text/csv",
        "restore": {
            "R": "alabaster.bumpy::loadBumpyDataFrameMatrix"
        }
    }
}
