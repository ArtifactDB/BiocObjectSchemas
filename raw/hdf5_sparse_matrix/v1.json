{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "hdf5_sparse_matrix/v1.json",
    "type": "object",
    "title": "HDF5 sparse matrix",
    "description": "Sparse matrix, saved in compressed sparse format inside a group of a HDF5 file. The HDF5 group should contain a `data` subgroup, which should in turn contain the typical contents of the compressed sparse matrix, i.e., `indices`, `indptr` and `data`. Specifically, `data` should be a 1-dimensional integer or numeric dataset contains the values of the non-zero elements; `indices` should be a 1-dimensional integer dataset containing the 0-based row/column index for each non-zero element in `data`; and `indptr` should be a 1-dimensional integer dataset of length equal to the number of columns/rows plus 1, containing pointers to the start and end of each column/row. The exact interpretation depends on the format specified in `format`.\n\nThe `array.dimensions` property should have exactly two elements. The first entry should be the number of rows, while the second entry should be the number of columns.\n\nDimnames may also be saved inside the same HDF5 file, as string datasets in another group. In such cases, the `hdf5_sparse_matrix.dimnames` property should be present and contain the name of that group.\n\nIf `data` is an integer dataset, missing values are represented by -2147483648.",
    "allOf": [
        { "$ref": "../array/v1.json" },
        { "$ref": "../_md5sum/v1.json" },
        {
            "properties": { 
                "array": {
                    "properties": {
                        "dimensions": {
                            "minItems": 2,
                            "maxItems": 2
                        }
                    }
                }
            }
        }
    ],
    "required": [
        "hdf5_sparse_matrix"
    ],
    "properties": {
        "hdf5_sparse_matrix": {
            "type":"object",
            "additionalProperties": false,
            "properties": {
                "group": {
                    "type": "string",
                    "description": "Name of the group inside the HDF5 file that contains the sparse matrix's data."
                },
                "format": {
                    "type": "string",
                    "description": "Format of the sparse matrix.\n\nThe `tenx_matrix` is a compressed sparse column format where `indices` contains row indices and `indptr` contains the column index pointers. The group should contain a `shape` dataset, an integer vector of length 2 containing the number of rows and columns.\n\nThe `csc_matrix` is a compressed sparse column format that has been transposed. (The transposition is a result of the `csc_matrix` format originally being defined in a framework where the interpretation of the rows and columns is flipped.) Thus, `indices` contains the column indices and `indptr` contains the row index pointers. The HDF5 group should contain an `encoding-type` attribute set to the `\"csc_matrix\"` scalar string; and a `shape` attribute, set to an integer vector of length 2 containing the number of columns followed by the number of rows (again, the reversed order is a result of the transposition).\n\nThe `csr_matrix` is a compressed sparse row format that has been transposed. (See explanation for the `csc_matrix`.) Thus, `indices` contains the row indices and `indptr` contains the column index pointers. The HDF5 group should contain an `encoding-type` attribute set to the `\"csr_matrix\"` scalar string; and a `shape` attribute, set to an integer vector of length 2 containing the number of columns followed by the number of rows.",
                    "enum": [ "csc_matrix", "csr_matrix", "tenx_matrix" ]
                },
                "dimnames": {
                    "type": "string",
                    "description": "Name of the group containing the dimnames. This group should contain zero or one string datasets for each dimension. The name of each string dataset is based on its dimension - `\"0\"` for rows, `\"1\"` for columns - and should have length equal to the extent of that dimension. If this property is not present, it can be assumed that no dimnames are available. Each dataset should not contain any missing values, so each string can be interpreted as-is."
                }
            },
            "required": [
                "format",
                "group"
            ]
        }
    },
    "_attributes": {
        "format": "application/x-hdf5",
        "restore": {
            "R": "alabaster.matrix::loadArray"
        }
    }
}
