{
    "$id": "hdf5_dense_array/v1.json",
    "$schema": "http://json-schema.org/draft-07/schema",
    "_attributes": {
        "format": "application/x-hdf5",
        "restore": {
            "R": "alabaster.matrix::loadArray",
            "python": "dolomite_matrix.load_hdf5_dense_array"
        }
    },
    "additionalProperties": false,
    "description": "Dense array, saved in a HDF5 file as an N-dimensional dataset for positive N.\n\n The dimensions reported in `array.dimensions` are be ordered from fastest-changing to slowest, i.e., the first entry of the `array.dimensions` property corresponds to the fastest-changing dimension. In the context of matrices, this implies a column-major layout where the first (faster) dimension corresponds to the rows and the second (slower) dimension corresponds to the columns.Note that this ordering is reversed in the dimensions of the HDF5 dataset, as the HDF5 library lists the dimensions from slowest-changing to fastest.\n\n The file may also contain the dimnames of the array, stored in a separate HDF5 group.If present, the name of the group should be listed in the `hdf5_dense_array.dimnames` property.\n\n Boolean arrays are stored as integer HDF5 datasets, where a value of 1 is truthy and a value of zero is falsey.These can be distinguished from integer columns by inspecting the `array.type` property.\n\n Integer arrays can be represented by any integer HDF5 datatype at the discretion of the data generator.However, it is advisable to use a data type that is representable by a 32-bit signed integer, for maximum compatibility with downstream clients.\n\n Each dataset may have a `missing-value-placeholder` attribute, containing a scalar value of the same type. Any value equal to this placeholder should be treated as missing. If no attribute exists, it can be assumed that no values are missing. (In `hdf5_dense_array.version = 1`, no placeholder was present; missing integers and booleans were represented by -2147483648 instead.)\n\nDerived from `array/v1.json`: some kind of multi-dimensional array, where we store metadata about the dimensions and type of data. The exact implementation of the array is left to concrete subclasses.",
    "properties": {
        "$schema": {
            "description": "The schema to use.",
            "type": "string"
        },
        "array": {
            "additionalProperties": false,
            "properties": {
                "dimensions": {
                    "description": "Dimensions of an n-dimensional array.",
                    "items": {
                        "type": "integer"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "type": {
                    "description": "Type of data stored in this array.",
                    "enum": [
                        "boolean",
                        "number",
                        "integer",
                        "string",
                        "other"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "dimensions"
            ],
            "type": "object"
        },
        "hdf5_dense_array": {
            "additionalProperties": false,
            "properties": {
                "dataset": {
                    "description": "Name of the dataset inside the HDF5 file that contains the array.",
                    "type": "string"
                },
                "dimnames": {
                    "description": "Name of the HDF5 group containing the dimnames. This group should contain zero or one string datasets for each dimension. Each string dataset is numbered after a dimension of the dense array (ordered from fastest- to slowest-changing) and should have length equal to the extent of that dimension, i.e., the dataset named `\"0\"` should have length equal to the first entry of `array.dimensions`. If this property is not provided, it can be assumed that no dimnames are available. Each dataset should not contain any missing values, so each string can be interpreted as-is.",
                    "type": "string"
                },
                "version": {
                    "default": 1,
                    "description": "Minor version of this format.",
                    "maximum": 2,
                    "type": "integer"
                }
            },
            "required": [
                "dataset"
            ],
            "type": "object"
        },
        "is_child": {
            "default": false,
            "description": "Is this a child document, only to be interpreted in the context of the parent document from which it is linked? This may have implications for search and metadata requirements.",
            "type": "boolean"
        },
        "md5sum": {
            "description": "MD5 checksum for the file.",
            "type": "string"
        },
        "path": {
            "description": "Path to the file in the project directory.",
            "type": "string"
        }
    },
    "required": [
        "$schema",
        "array",
        "hdf5_dense_array",
        "md5sum",
        "path"
    ],
    "title": "HDF5 dense array",
    "type": "object"
}
